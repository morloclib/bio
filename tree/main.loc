module bio.tree (*)

-- This type alias importing is getting a bit ludicrous
import conventions (Int, Bool, Str, Real, Tuple2, Tuple3, List, Map, Unit)
import base (snd, map, ne, append)


source Cpp from "rooted_tree.hpp"
  ( "mlc_rooted_pack_tree" as packRootedTreeCpp
  , "mlc_rooted_unpack_tree" as unpackRootedTreeCpp
  , "mlc_rooted_node" as node
  , "mlc_rooted_subtrees" as subtrees
  , "mlc_rooted_childLeafs" as childLeafs
  , "mlc_rooted_edgeMap" as edgeMap
  , "mlc_rooted_push" as push
  , "mlc_rooted_push_val" as pushVal
  , "mlc_rooted_pull" as pull
  , "mlc_rooted_pull_val" as pullVal
  , "mlc_rooted_treeBy" as treeBy
  , "mlc_rooted_foldTree" as foldTree
  , "mlc_rooted_alterTree" as alterTree
  , "mlc_rooted_mapNode" as mapNode
  , "mlc_rooted_mapEdge" as mapEdge
  , "mlc_rooted_mapLeaf" as mapLeaf
  )

source R from "tree.R"
  ( "mlc_pack_tree_phylo" as packRootedTreeR
  , "mlc_unpack_tree_phylo" as unpackRootedTreeR
  )

type R => (RootedTree n e l) = "phylo" n e l
type Cpp => (RootedTree n e l) = "RootedTree<$1,$2,$3>" n e l

packRootedTreeCpp :: pack => ([n], [(Int, Int, e)], [l]) -> RootedTree n e l
unpackRootedTreeCpp :: unpack => RootedTree n e l -> ([n], [(Int, Int, e)], [l])

-- A few tricky points, R is 1-based, but morloc is 0-based. This means that
-- when packing and unpacking indices need to be tweaked. In fact, I should add
-- a dedicated Index type.
packRootedTreeR :: pack => ([Str], [(Int, Int, Real)], [Str]) -> RootedTree Str Real Str
unpackRootedTreeR :: unpack => RootedTree Str Real Str -> ([Str], [(Int, Int, Real)], [Str])

source R from "ape.R" ("random_rooted_tree" as randomTree)

randomTree :: Int -> RootedTree Str Real Str

treeBy :: ([b] -> RootedTree n e Int) -> [(l, b)] -> RootedTree n e l

------- Atom Operations --------------------------------------------------------

node :: RootedTree n e l -> n
subtrees :: RootedTree n e l -> [(e, RootedTree n e l)]
childLeafs :: RootedTree n e l -> [(e, l)]

edgeMap :: RootedTree n e l -> Map Int (Int, e)

root :: RootedTree n e l -> Int
root = head . filter ne . enumerate . sort . fst . values . edgeMap


------- Pull Operations -------------------------------------------------------

-- general function for pulling values from tip to root
pullVal :: (l -> (a, n'))
        -> (n -> e -> a -> n' -> e')
        -> (n -> [(e', n', a)] -> (a, n'))
        -> RootedTree n e l
        -> RootedTree n' e' l

pull :: (l -> n')
     -> (n -> e -> n' -> e')
     -> (n -> [(e', n')] -> n')
     -> RootedTree n e l
     -> RootedTree n' e' l

-- pull values from leaf to root
pullNode :: (l -> n') -> ([n'] -> n') -> RootedTree n e l -> RootedTree n' e l
pullNode f g = pull
    (\l -> f l) -- generate n' using f
    (\n e n' -> e) -- do not change the edge
    (\n es -> g (map snd es)) -- create new node from child nodes, ignore the current node value

------- Push Operations -------------------------------------------------------

-- push a value down a tree, changing the node, edge and leaf types, but preserving topology
pushVal :: (a -> n -> n')
        -> (a -> n' -> e -> n -> (e', n'))
        -> (a -> n' -> e -> l -> (e', l'))
        -> (RootedTree n e l -> a -> a)
        -> a
        -> RootedTree n e l
        -> RootedTree n' e' l'

push :: (n -> n')
     -> (n' -> e -> n -> (e', n'))
     -> (n' -> e -> l -> (e', l'))
     -> RootedTree n e l
     -> RootedTree n' e' l'

mapNode :: (n -> n') -> RootedTree n e l -> RootedTree n' e l
mapNode f
    = push
      (\ n -> f n) -- at the root, ignore the accululator, after the node with the given function `f`
      (\ n' e n -> (e, f n)) -- at each internal node, ignore the accumulator and context and alter the node with `f`
      (\ n' e l -> (e, l)) -- do not change the leaf values

mapEdge :: (e -> e') -> RootedTree n e l -> RootedTree n e' l
mapEdge f = push (\ n -> n) (\ n' e n -> (f e, n)) (\ n' e l -> (f e, l))

mapLeaf :: (l -> l') -> RootedTree n e l -> RootedTree n e l'
mapLeaf f = push (\ n -> n) (\ n' e n -> (e, n)) (\ n' e l -> (e, f l))

mapChildWithParent :: (n -> n') -> (n' -> n -> n') -> RootedTree n e l -> RootedTree n' e l
mapChildWithParent f g
    = push
      (\ n -> f n)
      (\ n' e n -> (e, g n' n))
      (\ n' e l -> (e, l))


------- Fold Operations -------------------------------------------------------

-- general function for pulling values from tip to root
foldTree :: (l -> a -> a)
         -> (n -> e -> a -> a)
         -> a
         -> RootedTree n e l
         -> a

nodes :: RootedTree n e l -> [n]
nodes = foldTree (\l a -> a) (\n e a -> append a n) []

edges :: RootedTree n e l -> [e]
edges = foldTree (\l a -> a) (\n e a -> append a e) []

leafs :: RootedTree n e l -> [l] -- yes, that is how I pluralize leaf
leafs = foldTree (\l a -> append a l) (\n e a -> a) []


------- Unrooted Trees --------------------------------------------------------

type R => (UnrootedTree n e l) = "phylo" n e l 
type Cpp => (UnrootedTree n e l) = "UnrootedTree<$1,$2,$3>" n e l 

source Cpp from "unrooted_tree.hpp"
  (
  -- packers
    "mlc_pack_utree" as packUnrootedTreeCpp
  , "mlc_unpack_utree" as unpackUnrootedTreeCpp

  -- functions in common with rooted trees (these should be in the typeclass)
  , "mlc_unrooted_count_nodes" as countNodesU
  , "mlc_unrooted_count_leafs" as countLeafsU
  , "mlc_unrooted_count_edges" as countEdgesU
  , "mlc_unrooted_mapNode" as mapNodeU
  , "mlc_unrooted_mapEdge" as mapEdgeU
  , "mlc_unrooted_mapLeaf" as mapLeafU
  , "mlc_unrooted_treeBy" as treeByU

  -- functions unique to unrooted trees
  , "mlc_unrooted_midpoint" as rootAtMidpoint
  )

source R from "ape.R" ( "random_unrooted_tree" as randomTreeU )

randomTreeU :: Int -> UnrootedTree Str Real Str

countNodesU :: UnrootedTree n e l -> Int
countLeafsU :: UnrootedTree n e l -> Int
countEdgesU :: UnrootedTree n e l -> Int
mapNodeU :: (n -> n') -> UnrootedTree n e l -> UnrootedTree n' e l
mapEdgeU :: (e -> e') -> UnrootedTree n e l -> UnrootedTree n e' l
mapLeafU :: (l -> l') -> UnrootedTree n e l -> UnrootedTree n e l'
treeByU :: ([b] -> UnrootedTree n e Int) -> [(l, b)] -> UnrootedTree n e l

rootAtMidpoint :: UnrootedTree n Real l -> RootedTree n Real l


source R from "tree.R"
  ( "mlc_pack_tree_phylo" as packUnrootedTreeR
  , "mlc_unpack_tree_phylo" as unpackUnrootedTreeR
  )

packUnrootedTreeCpp :: pack => ([n], [(Int, Int, e)], [l]) -> UnrootedTree n e l 
unpackUnrootedTreeCpp :: unpack => UnrootedTree n e l -> ([n], [(Int, Int, e)], [l])

packUnrootedTreeR :: pack => ([Str], [(Int, Int, Real)], [Str]) -> UnrootedTree Str Real Str
unpackUnrootedTreeR :: unpack => UnrootedTree Str Real Str -> ([Str], [(Int, Int, Real)], [Str])
