module bio.algo (*)

import types (Str, Real, Int, List, Unit, Map)
import base (map)
import matrix (Matrix, selfcmp)

import bio.tree (RootedTree)
import bio.pure

source Cpp from "algo.hpp" ("countKmers", "kmerDistance", "upgmaFromDist")

-- count all substrings of length k in string s
countKmers :: Int -> Str -> Map Str Int

-- based on k-mer counts derived for two different sequences, generate a single
-- distance estimate
kmerDistance :: Map Str Int -> Map Str Int -> Real

-- From a distance matrix, generate a tree with branch lengths
-- and leafs that are indices into the original sequence list.
upgmaFromDist :: Matrix Real -> RootedTree () Real Int

-- Create a kmer distance tree using k-mers of length k
makeDist :: Int -> [Str] -> Matrix Real
makeDist k = selfcmp kmerDistance . map (countKmers k)

-- Build a UPGMA tree from unaligned sequences using a k-mer distance metric.
-- I am currently hard-coding the k-mer size. Eventually, I need a means of 
-- determining an optimal value for this from the input data.
upgma :: [Str] -> RootedTree () Real Int
upgma = upgmaFromDist . makeDist 8

-- treealign :: RootedTree () Real Int -> [Str] -> [Str]
-- njBase :: Matrix Real -> RootedTree () Real Int
-- pairwiseAlignment :: (a -> a -> Int) -> a -> [a] -> [a] -> ([a], [a])

-- class PhylogeneticTreeBuilder seq (tree node edge leaf) where
--   treeBy :: [(leaf, seq)] -> ([seq] -> tree node edge Int) -> tree node edge leaf
