module testAll (foo)

import conventions (Int, Real, Str, List, Tuple3, Tuple2)
import bio.tree(RootedTree, randomTree, nodes)

foo = nodes . randomTree

-- module testAll (testTree, t2)
--
-- import bio.tree(RootedTree, randomTree, node, nodes, edges, leafs, root, subtrees)
--
-- import conventions (Int, Real, Str, List, Tuple3, Tuple2)
--
-- -- I will test `treeBy` after I get the tree builders working
--
-- -- -- These are not yet implemented
-- -- pullVal :: (l -> (a, n'))
-- -- pushVal :: (a -> n -> n')
--
-- -- Rooted tree tests
--
-- -- randomTree :: Int -> RootedTree Str Real Str
-- testTree = randomTree 5
-- -- -- node :: RootedTree n e l -> n
-- -- t1 = node testTree
-- -- nodes :: RootedTree n e l -> [n]
-- t2 = nodes testTree
-- -- -- edges :: RootedTree n e l -> [e]
-- -- t3 = edges testTree
-- -- -- leafs :: RootedTree n e l -> [l]
-- -- t4 = leafs testTree
--
-- -- -- root :: RootedTree n e l -> Int
-- -- t5 = root testTree
-- -- -- subtrees :: RootedTree n e l -> [(e, RootedTree n e l)]
-- -- t6 = subtrees testTree
--
-- -- childLeafs :: RootedTree n e l -> [(e, l)]
--
-- -- edgeMap :: RootedTree n e l -> Map Int (Int, e)
-- -- pull :: (l -> n')
-- -- pullNode :: (l -> n') -> ([n'] -> n') -> RootedTree n e l -> RootedTree n' e l
-- -- push :: (n -> n')
-- -- mapNode :: (n -> n') -> RootedTree n e l -> RootedTree n' e l
-- -- mapEdge :: (e -> e') -> RootedTree n e l -> RootedTree n e' l
-- -- mapLeaf :: (l -> l') -> RootedTree n e l -> RootedTree n e l'
-- -- mapChildWithParent :: (n -> n') -> (n' -> n -> n') -> RootedTree n e l -> RootedTree n' e l
-- -- foldTree :: (a -> a -> a) -> (RootedTree n e l -> a) -> a -> RootedTree n e l -> a
--
-- -- Unrooted tree tests
--
-- -- randomTreeU :: Int -> UnrootedTree Str Real Str
-- -- randomTreeU R :: "integer" -> "phylo" "character" "numeric" "character"
-- -- countNodesU :: UnrootedTree n e l -> Int
-- -- countLeafsU :: UnrootedTree n e l -> Int
-- -- countEdgesU :: UnrootedTree n e l -> Int
-- -- mapNodeU :: (n -> n') -> UnrootedTree n e l -> UnrootedTree n' e l
-- -- mapEdgeU :: (e -> e') -> UnrootedTree n e l -> UnrootedTree n e' l
-- -- mapLeafU :: (l -> l') -> UnrootedTree n e l -> UnrootedTree n e l'
-- -- rootAtMidpoint :: UnrootedTree n Real l -> RootedTree n Real l
