module bio.tree (*)

-- This type alias importing is getting a bit ludicrous
import types (Int, Bool, Str, Real, Tuple2, Tuple3, List, Map, Unit)
import base (map, at, fst, snd, ne, append)

type R => (RootedTree n e l) = "phylo" n e l
type Cpp => (RootedTree n e l) = "RootedTree<$1,$2,$3>" n e l

instance Packable ([n], [(Int, Int, e)], [l]) (RootedTree n e l) where
  source Cpp from "rooted_tree.hpp"
    ( "mlc_rooted_pack_tree" as pack
    , "mlc_rooted_unpack_tree" as unpack
    )

-- A few tricky points, R is 1-based, but morloc is 0-based. This means that
-- when packing and unpacking indices need to be tweaked. I should add a
-- dedicated Index type.
instance Packable ([Str], [(Int, Int, Real)], [Str]) (RootedTree Str Real Str) where
  source R from "tree.R"
    ( "mlc_pack_tree_phylo" as pack
    , "mlc_unpack_tree_phylo" as unpack
    )


------- C++ Source ------------------------------------------------------------

source Cpp from "rooted_tree.hpp"
  ( "mlc_rooted_node" as node
  , "mlc_rooted_subtrees" as subtrees
  , "mlc_rooted_childLeafs" as childLeafs
  , "mlc_rooted_push" as push
  , "mlc_rooted_pull" as pull
  , "mlc_rooted_foldTree" as foldTree
  )

node n e l :: RootedTree n e l -> n

subtrees n e l :: RootedTree n e l -> [(e, RootedTree n e l)]

childLeafs n e l :: RootedTree n e l -> [(e, l)]

push n e l n' e' l'
  :: (n -> n')
  -> (n' -> e -> n -> (e', n'))
  -> (n' -> e -> l -> (e', l'))
  -> RootedTree n e l
  -> RootedTree n' e' l'

pull n e l n' e'
  :: (l -> n')
  -> (n -> e -> n' -> e')
  -> (n -> [(e', n')] -> n')
  -> RootedTree n e l
  -> RootedTree n' e' l

-- general function for pulling values from tip to root
foldTree n e l a
  :: (l -> a -> a)
  -> (n -> e -> a -> a)
  -> a
  -> RootedTree n e l
  -> a



------- R source --------------------------------------------------------------

source R from "ape.R" ("random_rooted_tree" as randomTree)

randomTree :: Int -> RootedTree Str Real Str



------- Pull Operations -------------------------------------------------------

-- TODO: bring this back
-- -- general function for pulling values from tip to root
-- pullVal
--   :: forall n e l n' e' a
--   .  (l -> (a, n'))
--   -> (n -> e -> a -> n' -> e')
--   -> (n -> [(e', n', a)] -> (a, n'))
--   -> RootedTree n e l
--   -> RootedTree n' e' l

-- pull values from leaf to root
pullNode n e l n'
  :: (l -> n')
  -> ([n'] -> n')
  -> RootedTree n e l
  -> RootedTree n' e l
pullNode f g = pull
    (\l -> f l) -- generate n' using f
    (\n e n' -> e) -- do not change the edge
    (\n es -> g (map snd es)) -- create new node from child nodes, ignore the current node value

-- TODO: bring this back
-- -- push a value down a tree, changing the node, edge and leaf types, but preserving topology
-- pushVal :: (a -> n -> n')
--         -> (a -> n' -> e -> n -> (e', n'))
--         -> (a -> n' -> e -> l -> (e', l'))
--         -> (RootedTree n e l -> a -> a)
--         -> a
--         -> RootedTree n e l
--         -> RootedTree n' e' l'

mapNode n e l n' :: (n -> n') -> RootedTree n e l -> RootedTree n' e l
mapNode f
    = push
      (\ n -> f n) -- at the root, ignore the accululator, after the node with the given function `f`
      (\ n' e n -> (e, f n)) -- at each internal node, ignore the accumulator and context and alter the node with `f`
      (\ n' e l -> (e, l)) -- do not change the leaf values

mapEdge n e l e' :: (e -> e') -> RootedTree n e l -> RootedTree n e' l
mapEdge f = push (\ n -> n) (\ n' e n -> (f e, n)) (\ n' e l -> (f e, l))

mapLeaf n e l l' :: (l -> l') -> RootedTree n e l -> RootedTree n e l'
mapLeaf f = push (\ n -> n) (\ n' e n -> (e, n)) (\ n' e l -> (e, f l))

mapChildWithParent n e l n' :: (n -> n') -> (n' -> n -> n') -> RootedTree n e l -> RootedTree n' e l
mapChildWithParent f g
    = push
      (\ n -> f n)
      (\ n' e n -> (e, g n' n))
      (\ n' e l -> (e, l))


------- Fold Operations -------------------------------------------------------

nodes n e l :: RootedTree n e l -> [n]
nodes = foldTree (\l a -> a) (\n e a -> append a n) []

edges n e l :: RootedTree n e l -> [e]
edges = foldTree (\l a -> a) (\n e a -> append a e) []

leafs n e l :: RootedTree n e l -> [l] -- yes, that is how I pluralize leaf
leafs = foldTree (\l a -> append a l) (\n e a -> a) []


------- Other Operations -------------------------------------------------------

source Cpp from "rooted_tree.hpp" ("mlc_rooted_treeBy" as treeBy)

treeBy n e l b
  :: ([b] -> RootedTree n e Int) -> [(l, b)] -> RootedTree n e l

-- -- This implementation is correct but has terrible performance since it 
-- -- re-evaluates `map fst xs` before every index lookup by `at`
-- treeBy treebuilder xs =
--   mapLeaf (at labels) (treebuilder sequences)
--   where
--     labels = map fst xs
--     sequences = map snd xs



------- Unrooted Trees --------------------------------------------------------

type R => (UnrootedTree n e l) = "phylo" n e l 
type Cpp => (UnrootedTree n e l) = "UnrootedTree<$1,$2,$3>" n e l 

source Cpp from "unrooted_tree.hpp"
  (
  -- functions in common with rooted trees (these should be in the typeclass)
    "mlc_unrooted_count_nodes" as countNodesU
  , "mlc_unrooted_count_leafs" as countLeafsU
  , "mlc_unrooted_count_edges" as countEdgesU
  , "mlc_unrooted_mapNode" as mapNodeU
  , "mlc_unrooted_mapEdge" as mapEdgeU
  , "mlc_unrooted_mapLeaf" as mapLeafU
  , "mlc_unrooted_treeBy" as treeByU

  -- functions unique to unrooted trees
  , "mlc_unrooted_midpoint" as rootAtMidpoint
  )

source R from "ape.R" ( "random_unrooted_tree" as randomTreeU )

randomTreeU :: Int -> UnrootedTree Str Real Str

countNodesU n e l :: UnrootedTree n e l -> Int
countLeafsU n e l :: UnrootedTree n e l -> Int
countEdgesU n e l :: UnrootedTree n e l -> Int
mapNodeU n e l n' :: (n -> n') -> UnrootedTree n e l -> UnrootedTree n' e l
mapEdgeU n e l e' :: (e -> e') -> UnrootedTree n e l -> UnrootedTree n e' l
mapLeafU n e l l' :: (l -> l') -> UnrootedTree n e l -> UnrootedTree n e l'
treeByU n e l b :: ([b] -> UnrootedTree n e Int) -> [(l, b)] -> UnrootedTree n e l

rootAtMidpoint n l :: UnrootedTree n Real l -> RootedTree n Real l

instance Packable ([n], [(Int, Int, e)], [l]) (UnrootedTree n e l) where
  source Cpp from "unrooted_tree.hpp"
    ( "mlc_pack_utree" as pack
    , "mlc_unpack_utree" as unpack
    )

instance Packable ([Str], [(Int, Int, Real)], [Str]) (UnrootedTree Str Real Str) where
  source R from "tree.R"
    ( "mlc_pack_tree_phylo" as pack
    , "mlc_unpack_tree_phylo" as unpack
    )
